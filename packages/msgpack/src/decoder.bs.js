// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Js_exn from "@rescript/std/lib/es6/js_exn.js";
import * as Js_dict from "@rescript/std/lib/es6/js_dict.js";
import * as Pervasives from "@rescript/std/lib/es6/pervasives.js";
import { timestampDecoder as timestampExt } from "./ext/TimestampDecoder";

var decode2 = (function (_t, bytes) {
    let offset = 0;
    const end = bytes.length;

    const units = [];
    let result = "";
    while (offset < end) {
      const byte1 = bytes[offset++];
      if ((byte1 & 0x80) === 0) {
        // 1 byte
        units.push(byte1);
      } else if ((byte1 & 0xe0) === 0xc0) {
        // 2 bytes
        const byte2 = bytes[offset++] & 0x3f;
        units.push(((byte1 & 0x1f) << 6) | byte2);
      } else if ((byte1 & 0xf0) === 0xe0) {
        // 3 bytes
        const byte2 = bytes[offset++] & 0x3f;
        const byte3 = bytes[offset++] & 0x3f;
        units.push(((byte1 & 0x1f) << 12) | (byte2 << 6) | byte3);
      } else if ((byte1 & 0xf8) === 0xf0) {
        // 4 bytes
        const byte2 = bytes[offset++] & 0x3f;
        const byte3 = bytes[offset++] & 0x3f;
        const byte4 = bytes[offset++] & 0x3f;
        let unit = ((byte1 & 0x07) << 0x12) | (byte2 << 0x0c) | (byte3 << 0x06) | byte4;
        if (unit > 0xffff) {
          unit -= 0x10000;
          units.push(((unit >>> 10) & 0x3ff) | 0xd800);
          unit = 0xdc00 | (unit & 0x3ff);
        }
        units.push(unit);
      } else {
        units.push(byte1);
      }

      if (units.length >= 0x1_000) {
        result += String.fromCharCode(...units);
        units.length = 0;
      }
    }

    if (units.length > 0) {
      result += String.fromCharCode(...units);
    }

    return result;
  });

var $$TextDecoder = {
  decode2: decode2
};

var flip64 = (function(binary) {
  let carry = 1;
  for (let i = 7; i >= 0; i--) {
    const v = (binary[i] ^ 0xff) + carry;
    binary[i] = v & 0xff;
    carry = v >> 8;
  }
});

function make(extensions) {
  var textDecoder = new TextDecoder();
  var extensions$1 = Js_dict.fromArray(extensions);
  return {
          textDecoder: textDecoder,
          extensions: extensions$1
        };
}

function decode(t, binary) {
  var extensions = t.extensions;
  var textDecoder = t.textDecoder;
  var binary$1 = binary.slice();
  var view = new DataView(binary$1.buffer);
  var decode$1 = function (binary, _state, _cursor) {
    while(true) {
      var cursor = _cursor;
      var state = _state;
      if (typeof state === "number") {
        var header = view.getUint8(cursor);
        var cursor$1 = cursor + 1 | 0;
        if (header < 128) {
          _cursor = cursor$1;
          _state = {
            TAG: /* Done */5,
            _0: header
          };
          continue ;
        }
        if (header < 144) {
          var len = header & 15;
          _cursor = cursor$1;
          _state = {
            TAG: /* DecodeMap */2,
            _0: len,
            _1: {}
          };
          continue ;
        }
        if (header < 160) {
          var len$1 = header & 15;
          _cursor = cursor$1;
          _state = {
            TAG: /* DecodeArray */1,
            _0: len$1,
            _1: new Array(len$1)
          };
          continue ;
        }
        if (header < 192) {
          var len$2 = header & 31;
          _cursor = cursor$1;
          _state = {
            TAG: /* DecodeString */0,
            _0: len$2
          };
          continue ;
        }
        switch (header) {
          case 192 :
              _cursor = cursor$1;
              _state = {
                TAG: /* Done */5,
                _0: null
              };
              continue ;
          case 193 :
              break;
          case 194 :
              _cursor = cursor$1;
              _state = {
                TAG: /* Done */5,
                _0: false
              };
              continue ;
          case 195 :
              _cursor = cursor$1;
              _state = {
                TAG: /* Done */5,
                _0: true
              };
              continue ;
          case 196 :
              var len$3 = view.getUint8(cursor$1);
              _cursor = cursor$1 + 1 | 0;
              _state = {
                TAG: /* DecodeBinary */3,
                _0: len$3
              };
              continue ;
          case 197 :
              var len$4 = view.getUint16(cursor$1);
              _cursor = cursor$1 + 2 | 0;
              _state = {
                TAG: /* DecodeBinary */3,
                _0: len$4
              };
              continue ;
          case 198 :
              var len$5 = view.getUint32(cursor$1);
              _cursor = cursor$1 + 4 | 0;
              _state = {
                TAG: /* DecodeBinary */3,
                _0: len$5
              };
              continue ;
          case 199 :
              var len$6 = view.getUint8(cursor$1);
              var type_ = view.getInt8(cursor$1 + 1 | 0);
              if (type_ === timestampExt.type) {
                _cursor = cursor$1 + 2 | 0;
                _state = {
                  TAG: /* DecodeExt */4,
                  _0: len$6,
                  _1: timestampExt
                };
                continue ;
              }
              var ext = Js_dict.get(extensions, String(type_));
              if (ext === undefined) {
                return Js_exn.raiseError("Unknown extension type " + String(type_));
              }
              _cursor = cursor$1 + 2 | 0;
              _state = {
                TAG: /* DecodeExt */4,
                _0: len$6,
                _1: ext
              };
              continue ;
          case 200 :
              var len$7 = view.getUint16(cursor$1);
              var type_$1 = view.getInt8(cursor$1 + 2 | 0);
              var ext$1 = Js_dict.get(extensions, String(type_$1));
              if (ext$1 === undefined) {
                return Js_exn.raiseError("Unknown extension type " + String(type_$1));
              }
              _cursor = cursor$1 + 2 | 0;
              _state = {
                TAG: /* DecodeExt */4,
                _0: len$7,
                _1: ext$1
              };
              continue ;
          case 201 :
              var len$8 = view.getUint32(cursor$1);
              var type_$2 = view.getInt8(cursor$1 + 4 | 0);
              var ext$2 = Js_dict.get(extensions, String(type_$2));
              if (ext$2 === undefined) {
                return Js_exn.raiseError("Unknown extension type " + String(type_$2));
              }
              _cursor = cursor$1 + 4 | 0;
              _state = {
                TAG: /* DecodeExt */4,
                _0: len$8,
                _1: ext$2
              };
              continue ;
          case 202 :
              var num = view.getFloat32(cursor$1);
              _cursor = cursor$1 + 4 | 0;
              _state = {
                TAG: /* Done */5,
                _0: num
              };
              continue ;
          case 203 :
              var num$1 = view.getFloat64(cursor$1);
              _cursor = cursor$1 + 8 | 0;
              _state = {
                TAG: /* Done */5,
                _0: num$1
              };
              continue ;
          case 204 :
              var num$2 = view.getUint8(cursor$1);
              _cursor = cursor$1 + 1 | 0;
              _state = {
                TAG: /* Done */5,
                _0: num$2
              };
              continue ;
          case 205 :
              var num$3 = view.getUint16(cursor$1);
              _cursor = cursor$1 + 2 | 0;
              _state = {
                TAG: /* Done */5,
                _0: num$3
              };
              continue ;
          case 206 :
              var num$4 = view.getUint32(cursor$1);
              _cursor = cursor$1 + 4 | 0;
              _state = {
                TAG: /* Done */5,
                _0: num$4
              };
              continue ;
          case 207 :
              var hi = view.getUint32(cursor$1);
              var lo = view.getUint32(cursor$1 + 4 | 0);
              var num$5 = hi * Math.pow(256.0, 4.0) + lo;
              _cursor = cursor$1 + 8 | 0;
              _state = {
                TAG: /* Done */5,
                _0: num$5
              };
              continue ;
          case 208 :
              var num$6 = view.getInt8(cursor$1);
              _cursor = cursor$1 + 1 | 0;
              _state = {
                TAG: /* Done */5,
                _0: num$6
              };
              continue ;
          case 209 :
              var num$7 = view.getInt16(cursor$1);
              _cursor = cursor$1 + 2 | 0;
              _state = {
                TAG: /* Done */5,
                _0: num$7
              };
              continue ;
          case 210 :
              var num$8 = view.getInt32(cursor$1);
              _cursor = cursor$1 + 4 | 0;
              _state = {
                TAG: /* Done */5,
                _0: num$8
              };
              continue ;
          case 211 :
              flip64(binary.subarray(cursor$1, cursor$1 + 9 | 0));
              var hi$1 = view.getUint32(cursor$1);
              var lo$1 = view.getUint32(cursor$1 + 4 | 0);
              var num$9 = hi$1 * Math.pow(256.0, 4.0) + lo$1;
              _cursor = cursor$1 + 8 | 0;
              _state = {
                TAG: /* Done */5,
                _0: 0.0 - num$9
              };
              continue ;
          case 212 :
              var type_$3 = view.getInt8(cursor$1);
              var ext$3 = Js_dict.get(extensions, String(type_$3));
              if (ext$3 === undefined) {
                return Js_exn.raiseError("Unknown extension type " + String(type_$3));
              }
              _cursor = cursor$1 + 1 | 0;
              _state = {
                TAG: /* DecodeExt */4,
                _0: 1,
                _1: ext$3
              };
              continue ;
          case 213 :
              var type_$4 = view.getInt8(cursor$1);
              var ext$4 = Js_dict.get(extensions, String(type_$4));
              if (ext$4 === undefined) {
                return Js_exn.raiseError("Unknown extension type " + String(type_$4));
              }
              _cursor = cursor$1 + 1 | 0;
              _state = {
                TAG: /* DecodeExt */4,
                _0: 2,
                _1: ext$4
              };
              continue ;
          case 214 :
              var type_$5 = view.getInt8(cursor$1);
              if (type_$5 === timestampExt.type) {
                _cursor = cursor$1 + 1 | 0;
                _state = {
                  TAG: /* DecodeExt */4,
                  _0: 4,
                  _1: timestampExt
                };
                continue ;
              }
              var ext$5 = Js_dict.get(extensions, String(type_$5));
              if (ext$5 === undefined) {
                return Js_exn.raiseError("Unknown extension type " + String(type_$5));
              }
              _cursor = cursor$1 + 1 | 0;
              _state = {
                TAG: /* DecodeExt */4,
                _0: 4,
                _1: ext$5
              };
              continue ;
          case 215 :
              var type_$6 = view.getInt8(cursor$1);
              if (type_$6 === timestampExt.type) {
                _cursor = cursor$1 + 1 | 0;
                _state = {
                  TAG: /* DecodeExt */4,
                  _0: 8,
                  _1: timestampExt
                };
                continue ;
              }
              var ext$6 = Js_dict.get(extensions, String(type_$6));
              if (ext$6 === undefined) {
                return Js_exn.raiseError("Unknown extension type " + String(type_$6));
              }
              _cursor = cursor$1 + 1 | 0;
              _state = {
                TAG: /* DecodeExt */4,
                _0: 8,
                _1: ext$6
              };
              continue ;
          case 216 :
              var type_$7 = view.getInt8(cursor$1);
              var ext$7 = Js_dict.get(extensions, String(type_$7));
              if (ext$7 === undefined) {
                return Js_exn.raiseError("Unknown extension type " + String(type_$7));
              }
              _cursor = cursor$1 + 1 | 0;
              _state = {
                TAG: /* DecodeExt */4,
                _0: 16,
                _1: ext$7
              };
              continue ;
          case 217 :
              var len$9 = view.getUint8(cursor$1);
              _cursor = cursor$1 + 1 | 0;
              _state = {
                TAG: /* DecodeString */0,
                _0: len$9
              };
              continue ;
          case 218 :
              var len$10 = view.getUint16(cursor$1);
              _cursor = cursor$1 + 2 | 0;
              _state = {
                TAG: /* DecodeString */0,
                _0: len$10
              };
              continue ;
          case 219 :
              var len$11 = view.getUint32(cursor$1);
              _cursor = cursor$1 + 4 | 0;
              _state = {
                TAG: /* DecodeString */0,
                _0: len$11
              };
              continue ;
          case 220 :
              var len$12 = view.getUint16(cursor$1);
              _cursor = cursor$1 + 2 | 0;
              _state = {
                TAG: /* DecodeArray */1,
                _0: len$12,
                _1: new Array(len$12)
              };
              continue ;
          case 221 :
              var len$13 = view.getUint32(cursor$1);
              _cursor = cursor$1 + 4 | 0;
              _state = {
                TAG: /* DecodeArray */1,
                _0: len$13,
                _1: new Array(len$13)
              };
              continue ;
          case 222 :
              var len$14 = view.getUint16(cursor$1);
              _cursor = cursor$1 + 2 | 0;
              _state = {
                TAG: /* DecodeMap */2,
                _0: len$14,
                _1: {}
              };
              continue ;
          case 223 :
              var len$15 = view.getUint32(cursor$1);
              _cursor = cursor$1 + 4 | 0;
              _state = {
                TAG: /* DecodeMap */2,
                _0: len$15,
                _1: {}
              };
              continue ;
          default:

        }
        if (header >= 256) {
          return Js_exn.raiseError("Unknown header " + String(header));
        }
        var num$10 = Pervasives.lnot(header ^ 255);
        _cursor = cursor$1;
        _state = {
          TAG: /* Done */5,
          _0: num$10
        };
        continue ;
      }
      switch (state.TAG | 0) {
        case /* DecodeString */0 :
            var len$16 = state._0;
            var view$1 = binary.subarray(cursor, cursor + len$16 | 0);
            var text = decode2(textDecoder, view$1);
            _cursor = cursor + len$16 | 0;
            _state = {
              TAG: /* Done */5,
              _0: text
            };
            continue ;
        case /* DecodeArray */1 :
            var array = state._1;
            var len$17 = state._0;
            if (len$17 !== 0) {
              var match = decode$1(binary, /* ExpectHeader */0, cursor);
              var index = array.length - len$17 | 0;
              array[index] = match[0];
              _cursor = match[1];
              _state = {
                TAG: /* DecodeArray */1,
                _0: len$17 - 1 | 0,
                _1: array
              };
              continue ;
            }
            _state = {
              TAG: /* Done */5,
              _0: array
            };
            continue ;
        case /* DecodeMap */2 :
            var map = state._1;
            var len$18 = state._0;
            if (len$18 !== 0) {
              var match$1 = decode$1(binary, /* ExpectHeader */0, cursor);
              var key = match$1[0];
              if (typeof key !== "string") {
                return Js_exn.raiseError("Unexpected key type. Expected string, but got " + typeof key);
              }
              var match$2 = decode$1(binary, /* ExpectHeader */0, match$1[1]);
              map[key] = match$2[0];
              _cursor = match$2[1];
              _state = {
                TAG: /* DecodeMap */2,
                _0: len$18 - 1 | 0,
                _1: map
              };
              continue ;
            }
            _state = {
              TAG: /* Done */5,
              _0: map
            };
            continue ;
        case /* DecodeBinary */3 :
            var len$19 = state._0;
            var copy = binary.slice(cursor, cursor + len$19 | 0);
            _cursor = cursor + len$19 | 0;
            _state = {
              TAG: /* Done */5,
              _0: copy
            };
            continue ;
        case /* DecodeExt */4 :
            var len$20 = state._0;
            var copy$1 = binary.slice(cursor, cursor + len$20 | 0);
            _cursor = cursor + len$20 | 0;
            _state = {
              TAG: /* Done */5,
              _0: state._1.decode(copy$1, len$20)
            };
            continue ;
        case /* Done */5 :
            return [
                    state._0,
                    cursor
                  ];

      }
    };
  };
  var match = decode$1(binary$1, /* ExpectHeader */0, 0);
  var readLength = match[1];
  var inputLength = binary$1.length;
  if (inputLength !== readLength) {
    Js_exn.raiseError("Invalid input length, expected " + String(inputLength) + ", but got " + String(readLength));
  }
  return match[0];
}

export {
  make ,
  decode ,

}
